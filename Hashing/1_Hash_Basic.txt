 Hashing:

1) Advantage=>

 Hashing Search Time complexcity is O(1)(Fastest from Other).

2) Disadvantage=>

*Collosion->One Key OR More than one keys targeting (pointing) on location which is  location of another key. 

terms:        \
Loding Factor(/\): no of elements(n)/size          \
note: Load Factor is ALways less than wqual to 0.5(/\ <= 0.5)

 /*
     Note:Load Factor <= 0.5(only used half space of hashtable for store ele)
     
     number of ele(m)=5,memory blocks(size)=10
     Ex.
     LF =m/size =5/10 =0.5 (allow at most 5 ele)
     LF =m/size =6/10 =0.6 (Not allow 6 ele)
     LF =m/size =7/10 =0.7 (Not allow 7 ele)
     
     */
-----------------------------------------------------------------
<*> Type of Hashing <*>

 1) Open Hashing(close Addressing):

 ->In which used Another Data Structure(LinkList) for store data in efficient way ,to avoid collosion.

 2) Closed Hashing(Open Addressing):

 -> Insted of use Another Data Structure use available location space for storing data to avoid collosion.
 -> Open Addressing Done in folling ways : 

 i) Linear Probing(searching):

 Hash func: h(key)= (key+i) % size.
 in which Done Linear Probing for next free space for that used above hash func.
 cons->clustering (Many element form groups)& it take time for search free space or to search an element .

 ii) Quadratic Probing(searching): 
 
 Hash func: h(key)=( hash(key) + i*i) % size.
 in which Probing is Done for next free space for that using Abone hash func.

 -if h(key)=( hash(key) + 1*1) % size for that index loc is full then look up next prob.
 -if h(key)=( hash(key) + 2*2) % size for that index loc is also full then look up next prob.
 -if h(key)=( hash(key) + 3*3) % size
 loc is also full then look up next prob & so on untill find free location......

 iii) Double Hashing: 

  Hash func: h(key)=( hash(key) + i*hash2(key) ) % size.
 in which Probing is Done for next free space for that using Abone hash func.
 
 -if h(key)=( hash(key) + 1*hash2(key)) % size for that index loc is full then look up next prob.
 -if h(key)=( hash(key) + 2*hash2(key)) % size for that index loc is also full then look up next prob.
 -if h(key)=( hash(key) + 3*hash2(key)) % size
 loc is also full then look up next prob & so on untill find free location......

Representation of Basic Hash table:

for store key's value location find using hash func h(key)= hash(key)%size

 keys   value ind(location)
 |k1|    |5|   0
     \  / |8|  1            
 |k2|-\/->|9|  2
      /\  |-|  3
     /  \ |-|  4
 |k3|    |7|   5
 |k4|---->|2|  6

